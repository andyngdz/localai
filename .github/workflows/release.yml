name: Release

on:
  push:
    branches:
      - main
      - release

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: 'latest'

jobs:
  version:
    name: Create Release
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_EXIST: 'false'
        run: npx semantic-release

  build:
    name: Build for ${{ matrix.os }}
    needs: [version]
    if: needs.version.outputs.new_release_published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout Code at Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.new_release_git_tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build Electron App
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Artifacts
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 7

      - name: Upload macOS Artifacts
        if: matrix.platform == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 7

      - name: Upload Linux Artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.zip
          retention-days: 7

  upload:
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    needs: [version, build]
    if: needs.version.outputs.new_release_published == 'true'
    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./artifacts/windows

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./artifacts/macos

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./artifacts/linux

      - name: Upload Artifacts to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.version.outputs.new_release_git_tag }} artifacts/**/* --clobber
