name: Release

on:
  push:
    branches:
      - main
      - release

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  NODE_VERSION: 'latest'

jobs:
  prerelease:
    name: Create Pre-release
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Create pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  release:
    name: Create Stable Release
    if: github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_info.outputs.release_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Create stable release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Get release info
        id: get_info
        run: echo "release_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> "$GITHUB_OUTPUT"

  build:
    name: Build for ${{ matrix.os }}
    needs: [release]
    if: success() && needs.release.outputs.release_tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
          - os: ubuntu-latest
            platform: linux
    steps:
      - name: Checkout Code at Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.release_tag }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Patch package.json version
        run: |
          VERSION=$(echo ${{ needs.release.outputs.release_tag }} | sed 's/^v//')
          npm version --no-git-tag-version --allow-same-version $VERSION

      - name: Build Electron App
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            dist/*.exe
            dist/*.zip
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
          retention-days: 7

  upload:
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    needs: [release, build]
    if: success() && needs.release.outputs.release_tag
    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./artifacts/windows

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./artifacts/macos

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: ./artifacts/linux

      - name: Upload Artifacts to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.release.outputs.release_tag }} artifacts/**/* --clobber